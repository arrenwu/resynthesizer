# Vagga script to build Gimp 3 and Resynthesizer 3

containers:

  # basic OS with dev (compiling)
  baseOS:
    setup:

    # Install OS in the container.
    #
    # Note that this command no longer works in vagga:  - !Ubuntu lunar
    #
    # Note that the notion of a "cloud image" seems to have changed in Ubuntu,
    # the image when executed prints messages about the VM, which you can ignore.
    #
    # Installs Ubuntu 24.04, a LTS
    #
    # This is daily, mirrors don't have proper copies of updates
    - !UbuntuRelease { codename: noble, url: http://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64-root.tar.xz}

    # tools for dev (C compiler)
    - !Install [build-essential]
    
    # optional for debugging the built GIMP
    - !Install [gdb]




  # with required build tools
  # Some tools are optional: clang
  # meson is not optional, GIMP no longer supports autotools build
  baseWithTools:
    setup:
    - !Container baseOS

    # Enable universe repo, where many packages live
    - !UbuntuUniverse

    # GIMP build needs setuptools
    - !Install [python3-setuptools]

    # meson is a python3 app
    # Install packaged version, which might be too old.
    # Alternatively, get latest using pip

    - !Install [meson]

    # clang versus gcc
    - !Install [clang]
    # gnu ld vs llvm's lld (installs as ld.lld)
    - !Install [lld]

    # meson and autotools use pkg-config
    - !Install [pkg-config]

    # meson.build calls git
    - !Install [git]

    # meson will use cmake if available?
    - !Install [cmake]

    # build uses gobject introspection tools
    - !Install [gobject-introspection]

    # more tools
    - !Install [ xsltproc]

    # tool to build API docs
    - !Install [gtk-doc-tools]

    # libtool not needed except for autotools build
    # libtool replaced by intltool

    # in8n internationalization
    - !Install [intltool]

    # New required tool for Gimp gettext stuff, June 2022
    - !Install [ autopoint ]

    # optional for testing the built GIMP
    - !Install [ valgrind ]

    # Install libc w debug for valgrind
    - !Install [libc6-dbg]

    # optional for browsing API docs
    - !Install [ yelp ]



  # with libraries required by gegl, babl, gimp (and other things we build)

  # these are package names, might depend on distribution
  # e.g. package names are different in alpine

  gimpDeps:
    setup:
    - !Container baseWithTools

    # babl, gegl, GIMP uses glib group of libraries
    # package comprises glib, gobject, and gio
    - !Install [glib2.0-dev]

    # the builds deposit introspection data
    # If omit, get can't find ...gir... when building gegl
    - !Install [libgirepository1.0-dev]

    # babl specific

    # links against lcms2 (lite color mgt system) library, need the dev flavor
    - !Install [liblcms2-dev]

    # gegl specific

    # depends on babl (which we build), and these libraries from packages
    - !Install [libjson-glib-dev]

    # gimp specific
    # Somewhat in reverse order of complain by build

    # interpreters
    # Python3 PyGObject.  See earlier, installed Python3
    - !Install [ python3-gi]

    # plugins, mainly file format plugins?
    # JPEG format
    - !Install [ libjpeg-dev]
    # TIFF format
    - !Install [ libtiff-dev]
    # PDF format
    - !Install [ libpoppler-glib-dev]
    - !Install [ poppler-data]

    # file compressors
    - !Install [ liblzma-dev]
    - !Install [ libbz2-dev]

    # ???
    - !Install [ libxmu-dev]
    - !Install [ libappstream-glib-dev]
    - !Install [ librsvg2-dev]

    # mypaint
    - !Install [ mypaint-brushes]
    - !Install [ libmypaint-dev]

    # accessibility toolkit
    - !Install [ libatk1.0-dev]

    #image metadata
    - !Install [ libgexiv2-dev]

    # graphics toolkit: GTK and GDK
    - !Install [ libgtk-3-dev]

    # gtk-encode-symbolic-svg
    # To search installed packages: dpkg -S gtk-encode-symbolic-svg
    # To search Ubuntu in browser "Ubuntu Packages Search"
    # Prior to Ubuntu 20.04:  - !Install [ gtk-3-examples]
    - !Install [libgtk-3-bin]

    # Needed by GIMP, a basic renderer?
    - !Install [ libgdk-pixbuf2.0-dev]

    # renderers
    - !Install [ libpango1.0-dev]
    - !Install [ libcairo2-dev]

    # optional but suppress warnings
    - !Install [ libcanberra-gtk3-module ]

    # image metadata
    - !Install [ libgexiv2-dev]


    # Ubuntu requires this else Gimp..Gtk crashes with:  Icon 'image-missing' not present in theme Symbolic
    - !Install [ gnome-icon-theme ]

    # GIMP plugins in languages [vala, javascript, python, lua] may require 
    # certain compilers and interpreters.
    # Required when the option is chosen in the GIMP build
    # vala
    #- !Install [ valac ]
    # lua
    #- !Install [ luajit]
    #- !Install [ lua-lgi ]
    # javascript
    #- !Install [ gjs]

    # avoid dbus error messages from gimp
    - !Install [ dbus-x11 ]

    # Needed for meson, clang build
    - !Install [ libomp-dev ]

    # gimp tests want x11 virtual frame buffer
    - !Install [xvfb]


    # remove DNS file that vagga will recreate after build
    # !!! You must do this last, and not at the beginning of a container build
    - !Sh "rm /etc/resolv.conf"

    # Larger /tmp for testing
    # 100Mi is default, not enough to create many image files
    volumes:
      /tmp: !Tmpfs { size: 500Mi, mode: 0o1777 }

    environ:
      HOME: /work/.home



  # with babl, gegl source
  #
  # gimp requires latest babl, gegl, so we build instead of install.
  # These are relatively stable compared to gimp source.
  # Usually gegl.org and babl.org tag and release a version
  # just before gimp.org release a version.
  # But we build nightly, and don't try to match versions.
  gimpDepsSource:
    setup:
    - !Container gimpDeps

    - !Sh |
       git clone https://gitlab.gnome.org/GNOME/babl.git /home/babl

    - !Sh |
       git clone https://gitlab.gnome.org/GNOME/gegl.git /home/gegl

    # starting about Dec. 2021, require gexiv2 > 12.2 which is not present in Ubuntu



  # With built babl, gegl
  bablGeglDev:
    setup:
    - !Container gimpDepsSource

    # Build (from source) certain prereqs of gimp: babl, gegl

    # We don't set GIMP_PREFIX.  Instead we install to default place.

    # If Debian, need the architecture label
    # TODO not working, see below, hardcoded
    - !Sh echo "Determine architecture"
    - !Sh dpkg-architecture -qDEB_HOST_MULTIARCH 2> /dev/null
    - !Env
      MY_ARCH: dpkg-architecture -qDEB_HOST_MULTIARCH 2> /dev/null
    - !Sh echo $MY_ARCH

    # Used by GIMP build to detect the build dependencies
    # E.G. gegl depends on babl installed and uses pkgconfig to find it
    # This has Debian path prepended
    # TODO "${GIMP_PREFIX}/lib/${MY_ARCH}/pkgconfig:${GIMP_PREFIX}/lib/pkgconfig:${GIMP_PREFIX}/share/pkgconfig"
    #- !Env
    #  PKG_CONFIG_PATH: "/home/lib/x86_64-linux-gnu/pkgconfig:/home/lib/pkgconfig:/home/share/pkgconfig"
    - !Sh echo $PKG_CONFIG_PATH


    - !Sh |
        cd /home/babl
        meson _build \
         --buildtype=debug \
          -Dwith-docs=false
        cd _build
        ninja
        ninja install

    # Partial check of installed artifacts, installed in default location
    #- !Sh test -d /usr/local/share/gir-1.0/babl/Babl-0.1.gir


    # build gegl

    # When it builds, it lists options that will be built, according to installed libraries it finds
    # e.g. won't build umfpack if libumfpack5 is not installed
    # Then at GIMP runtime, it may complain of missing GEGL ops

    # Used to find the glib-introspection dependencies.
    # gegl builds its introspection data.
    # To do so, it must find Babl-0.1.gir
    # was  XDG_DATA_DIRS: "/home/share:/usr/share:$XDG_DATA_DIRS"
    # was  XDG_DATA_DIRS: "/usr/local/shared"
    - !Env
      XDG_DATA_DIRS: "/usr/local/share:/usr/share"
    - !Sh echo ">>>>>>  XDG_DATA_DIRS" $XDG_DATA_DIRS

  
    - !Sh |
        cd /home/gegl
        meson _build \
         --buildtype=debug \
         -Ddocs=false \
         -Dgtk-doc=false
        cd _build
        ninja
        ninja install

    # remove DNS file that vagga will recreate after build
    - !Sh "rm /etc/resolv.conf"




  # Container ready to build GIMP, but not building GIMP.
  # GIMP git clone must be in /work/gimp i.e. directory in 
  # Build directory is not in the container.
  # GIMP is not built or installed in the container
  # Local custom Gimp plugins not in the container.

  # The container should NOT automatically rebuild if /work/gimp source changes
  # But if you change a meson.build file, you need to rebuild this container??

  # use --wipe to insure any changes take effect, but you can't use wipe the first time

  gimpMesonDev:
    setup:
    - !Container bablGeglDev

    # This container NOT depend on changed gimp source
    # Note that meson builds out of tree, i.e. does not touch gimp directory
    # Except that it does, it puts pdbgen files back in the source tree

    # resolve FAILED: cursors/gimp-tool-cursors.c   Related to vector icons?
    - !Env  XDG_DATA_DIRS: "/usr/local/share:/usr/share"

    # resolve ../plug-ins/common/file-pdf-load.c:32:10: fatal error: poppler.h: No such file or directory
    - !Env LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib"

    - !Env PKG_CONFIG_PATH: "/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig"


    #### Options for GIMP build

    # optional language support for plugins
    # 
    # Python not optional since 2.99
    #
    # -Djavascript=disabled \
    # -Dlua=false \
    # -Dvala=disabled \

    - !Sh echo "PKG_CONFIG_PATH:" $PKG_CONFIG_PATH

    # project directory is /work

    - !Sh |
        # gimp repo
        cd /work/gimp

        # git submodule "gimp-data" must be present
        # Must be before setup build dir
        git submodule update --init

        # setup build dir (never build in source tree)
        CC=clang CXX=clang CC_LD=lld CXX_LD=lld meson setup /work/gimpBuild \
         -Dg-ir-doc=false

        # We setup resynthBuild later, because it requires an installed gimp-3.0
        # and we have not built and installed it yet
    
    # wayland

    # create new filesystem name run in the container
    # put the wayland display socket in it
    volumes:
      # bind external volume named runuser pointing to external /run/user/1000 to /run in container
      /run: !BindRW /volumes/runuser



commands:

  # Use "vagga run" in a terminal in the work dir
  run: !Command
    description: Build, install, run gimp AND resynth in gimpMesonDev container
    container:  gimpMesonDev
    write-mode: transient-hard-link-copy
    run: |
      # Setup env, the container does not do this
      export LD_LIBRARY_PATH=/usr/local/lib/x86_64-linux-gnu:/usr/local/lib
      export HOME=/work/.home
      export GIMP_PREFIX=/usr/local
      export XDG_DATA_DIRS=/usr/local/share:/usr/share
      export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      export NO_AT_BRIDGE=1
      export XDG_RUNTIME_DIR=/run

      # First must build gimp, it is not in the container
      echo "lkk >>>>>>>>>>> build and install GIMP"
      cd /work/gimpBuild
      meson compile -j 12
      meson install

      echo "lkk >>>>>>>>>>> configure resynthBuild"
      cd /work/resynthesizer
      # only the resynthesizer3 branch is for meson
      git checkout resynthesizer3
      CC=clang CXX=clang CC_LD=lld CXX_LD=lld meson setup  --reconfigure /work/resynthBuild

      echo "lkk >>>>>>>>>>>>> build and install resynth"
      # Note this was configured earlier
      cd /work/resynthBuild
      

      meson compile --verbose -j 12
      meson install

      # Turn on debugging using GLib logging
      export G_MESSAGES_DEBUG=all


      echo "lkk >>>>>>>>>>> running gimp with resynthesizer installed"
      # Choose one of these by uncommenting one...
      # valgrind /usr/local/bin/gimp-3 --verbose --stack-trace-mode query
      /usr/local/bin/gimp-3 --verbose --stack-trace-mode query
      # gdb /usr/local/bin/gimp-3

      echo "lkk >>>>>>>>>>>> running test plugin for resynthesizer"
      # python3 /work/resynthesizer/test/testResynth.py
      #/usr/local/bin/gimp-3 -i --batch-interpreter python-fu-eval --batch - < /work/resynthesizer/test/testResynth.py



  runHeal: !Command
    description: Build, install, run libheal test harness in gimpMesonDev container
    container:  gimpMesonDev
    write-mode: transient-hard-link-copy
    run: |
      # Setup env, the container does not do this
      export LD_LIBRARY_PATH=/usr/local/lib/x86_64-linux-gnu:/usr/local/lib
      export HOME=/work/.home
      export GIMP_PREFIX=/usr/local
      export XDG_DATA_DIRS=/usr/local/share:/usr/share
      export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      export NO_AT_BRIDGE=1



      # First must build gimp, it is not in the container
      echo "lkk >>>>>>>>>>> build and install GIMP"
      cd /work/gimpBuild
      meson compile -j 8
      meson install

      echo "lkk >>>>>>>>>>>>> setup healBuild"
      # Note this has one other option
      cd /work/resynthesizer
      CC=clang CXX=clang CC_LD=lld CXX_LD=lld meson setup  /work/healBuild -Dbuild-libheal=true

      echo "lkk >>>>>>>>>>>>> build and install heal"
      cd /work/healBuild
      meson compile --verbose -j 8
      meson install


      export G_MESSAGES_DEBUG=all

      echo "lkk >>>>>>>>>>>> running test harness for engine library"
      /usr/local/bin/testHealLib


  diagnoseBuildDir: !Command
    description: Print env etc. of gimpMesonDev container
    container:  gimpMesonDev
    run: |
      export HOME=/work/.home
      export XDG_DATA_DIRS=/usr/local/share:/usr/share
      export XDG_RUNTIME_DIR=/run/user/1000
    
      echo "meson version:" 
      meson --version

      echo "contents of /run using ls /run:"
      ls /run

      # These env vars are not automatically in the container, from the host
      echo "certain env vars"
      echo "HOME:" $HOME
      echo "XDG_SESSION_ID:" $XDG_SESSION_ID
      echo "XDG_SESSION_TYPE:" $XDG_SESSION_TYPE
      echo "WAYLAND_DISPLAY:" $WAYLAND_DISPLAY
      echo "XCURSOR_THEME:" $XCURSOR_THEME
      echo "XDG_RUNTIME_DIR:" $XDG_RUNTIME_DIR
      echo "DISPLAY:" $DISPLAY


      